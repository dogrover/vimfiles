" Keep this file under bundles/, make most .vimrc changes here. Source it with
" a stub .vimrc in the user directory. See ../_vimrc_EXAMPLE.

" General editor settings
set autoindent						" Automatically indent
set autoread						" Monitor open files for changes
set backspace=indent,eol,start		" Smart backspacing, where allowed
set diffopt=filler,iwhite			" Show all lines, ignore trailing spaces
set helplang=En						" Help is in English
set history=200						" Remember past commands
set hlsearch						" Hilite the search term
set incsearch						" Hilite items mathing the current search
set linebreak						" Better control over linebreaks
set more							" Prompt after a full screen of data
set noerrorbells					" No beeps, please
set nohidden						" Do not keep unsaved buffers
set nolazyredraw					" Redraw as often as needed
set number							" Always show line numbers
set numberwidth=6					" Always keep six columns for line numbers
set ruler							" Show rule at the bottom of the screen
set scrolloff=5						" Keep 5 rows visible around cursor row
set shiftwidth=4					" Indent 4 columns
set showcmd							" Display partial commands in progress
set showfulltag						" Show entire completion, when available
set showmatch						" Show matching bracket
set showmode						" Display the current editing mode
set sidescrolloff=5					" Keep 5 columns visible around cursor
set smartindent						" C-style indenting is the norm
set smarttab						" Do the right thing on new lines
set softtabstop=4					" Soft-tabs are 4 columns
set tabstop=4						" Tabs are 4 columns
set ttyfast							" Fast terminal
set undolevels=1000					" Lots and lots of undo
set updatecount=100					" Frequent updates to swapfile
set viminfo='100,h					" Save marks from past files
set whichwrap=b,s,<,>,[,]			" Which characters move across line breaks
set wildmenu						" Menu has tab completion
set wildmode=longest:full			" More complete keyword completion
set window=80						" Default size for new windows
syntax on

" Backup options. Consolidate all backups in a single location.
set backupdir=%HOMEPATH%\\Documents\\VimBackup,~\\,.
set backup

" MSWindows-style key-mapping
"    Backspace handling
vnoremap <BS> d
vmap <C-Del> "*d
inoremap  u
"    Shift-Ins: Alias to Paste
cmap <S-Insert> +
imap <S-Insert> 
vmap <S-Insert> 
nmap <S-Insert> "+gP
omap <S-Insert> "+gP
"    Ctrl-A: Selects all
xnoremap  ggVG
snoremap  gggHG
onoremap  gggHG
nnoremap  gggHG
cnoremap  gggHG
inoremap  gggHG
"    Ctrl-C: Copy to clipboard
vnoremap  "+y
vnoremap <C-Insert> "+y
"    Ctrl-Q: Quit
noremap  
"    Ctrl-S: Save
vnoremap  :update
nnoremap  :update
onoremap  :update
inoremap  :update
"    Ctrl-V: Paste
nmap  "+gP
omap  "+gP
cmap  +
"    Ctrl-X: Cut
vnoremap  "+x
vnoremap <S-Del> "+x
"    Ctrl-Y: Redo
noremap  
inoremap  
"    Ctrl-Z: Undo
noremap  u
inoremap  u
cnoremap   :simalt ~
inoremap   :simalt ~
noremap   :simalt ~

" UI stuff
behave mswin							" Act like Windows
set guioptions=emr
set showtabline=2
set guifont=Bitstream_Vera_Sans_Mono:h8:cANSI
set selectmode=mouse,key

" Quick macro to insert current date\time stamp 
:nnoremap <F5> "=strftime("%d-%b-%Y %H:%M:%S")<CR>P
:inoremap <F5> <C-R>=strftime("%d-%b-%Y %H:%M:%S")<CR>

" Settings for :TOhtml (built-in command)
let html_number_lines=1					" Include line numbers
let html_use_css=1						" Generate shorter HTML 4 file
let use_xhtml=1							" Generate valid XHTML

" Keymappings which swap different text entities. See:
" http://vim.wikia.com/wiki/Swapping_characters,_words_and_lines 
" Swaps the current character with the next. Cursor stays.
:nnoremap <silent> gc xph
" Swaps the current word with the next, honoring puctuation, and keeping
" cursor in the same place. Works across newlines
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" Swap the current word with the previous, keeping cursor on current word
" (like 'pushing' the word to the left.)
:nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l> 
" Swap the current word with the next, keeping cursor on current word (like
" 'pushing' the word to the right.)
:nnoremap <silent> gr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
" Swap the current paragraph with the next
:nnoremap g{ {dap}p{
